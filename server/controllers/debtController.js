const db = require('../config/db');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤
exports.getAllDebts = async (req, res) => {
  try {
    const [rows] = await db.query('SELECT * FROM debts WHERE user_id = ?', [req.user.id]);
    res.json(rows);
  } catch (error) {
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–ª–≥–∞
exports.addDebt = async (req, res) => {
  const { debtor_name, amount, type, comment, date } = req.body;

  if (!req.user || !req.user.id) {
    return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
  }

  try {
    // ‚úÖ –ë–∞–∑–∞–¥–∞ –Ω–æ–º –º–∞–≤–∂—É–¥–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
    const [existingDebts] = await db.query(
      'SELECT * FROM debts WHERE user_id = ? AND debtor_name = ?',
      [req.user.id, debtor_name]
    );

    if (existingDebts.length > 0) {
      return res.status(400).json({ message: '‚ùå –¢–∞–∫–æ–π –¥–æ–ª–∂–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!' });
    }

    await db.query(
      'INSERT INTO debts (user_id, debtor_name, amount, type, comment, date) VALUES (?, ?, ?, ?, ?, ?)',
      [req.user.id, debtor_name, amount, type, comment, date]
    );

    res.status(201).json({ message: '–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ª–≥–∞:', error);
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞
exports.updateDebt = async (req, res) => {
  const { id } = req.params;
  const { debtor_name, amount, type, comment, date } = req.body;

  console.log("üì• SERVER: RECEIVED DATE FROM CLIENT:", date);

  if (!id || isNaN(id)) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID" });
  }

  // ‚úÖ –ê–≥–∞—Ä `date` —ç—Å–∫–∏ –±—û–ª—Å–∞, —Å–µ—Ä–≤–µ—Ä “≥–æ–∑–∏—Ä–≥–∏ –≤–∞“õ—Ç–Ω–∏ “õ—û–π–∏–± —é–±–æ—Ä–∞–¥–∏
  const localDate = date ? new Date(date) : new Date();
  localDate.setMinutes(localDate.getMinutes() - localDate.getTimezoneOffset());
  const formattedDate = localDate.toISOString().slice(0, 19).replace('T', ' '); // ‚úÖ "YYYY-MM-DD HH:mm:ss"

  console.log("üì§ SERVER: FORMATTED DATE FOR DATABASE:", formattedDate);

  try {
    const [result] = await db.query(
      'UPDATE debts SET debtor_name = ?, amount = ?, type = ?, comment = ?, date = ? WHERE id = ? AND user_id = ?',
      [debtor_name, amount, type, comment, formattedDate, id, req.user.id]
    );

    console.log("‚úÖ SERVER: UPDATE SUCCESSFUL!");
    res.json({ message: '–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω' });
  } catch (error) {
    console.error("‚ùå SERVER ERROR:", error);
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error: error.message });
  }
};




// controllers/debtController.js
exports.addDebtorDetail = async (req, res) => {
  try {
    const newDebtor = req.body;
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    res.status(201).json({ message: '–î–æ–ª–∂–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', debtor: newDebtor });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–∏–∫–∞:", error);
    res.status(500).json({ message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" });
  }
};




// –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞
exports.deleteDebt = async (req, res) => {
  const { id } = req.params;

  try {
    await db.query('DELETE FROM debts WHERE id = ? AND user_id = ?', [id, req.user.id]);
    res.json({ message: '–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
};


exports.updateDebtorDetail = async (req, res) => {
  const { id } = req.params;
  const updatedData = req.body;
  try {
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ debts –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    const [result] = await db.query(
      'UPDATE debts SET ? WHERE id = ? AND user_id = ?',
      [updatedData, id, req.user.id]
    );
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "–î–æ–ª–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: '–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–∞:", error);
    res.status(500).json({ message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" });
  }
};
exports.addTransaction = async (req, res) => {
  const { id } = req.params; // debt_id: debts jadvalidagi ID
  const { type, amount, comment } = req.body;

  try {
    // 1. transactions jadvaliga yangi tranzaksiya qo'shamiz, endi comments ustuni ham bor
    const [insertResult] = await db.query(
      'INSERT INTO transactions (debt_id, type, amount, date, comments) VALUES (?, ?, ?, NOW(), ?)',
      [id, type, amount, comment]
    );

    // 2. debts jadvalidagi asosiy summani yangilash
    const operator = type === 'plus' ? '+' : '-';
    await db.query(
      `UPDATE debts SET amount = amount ${operator} ? WHERE id = ?`,
      [amount, id]
    );

    res.status(201).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', transactionId: insertResult.insertId });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};

exports.deleteTransaction = async (req, res) => {
  const { id, transactionId } = req.params; // id - debts jadvalidagi ID, transactionId - o'chiriladigan transaction ID
  try {
    // 1. O'chirilayotgan tranzaksiyaning type va amount qiymatlarini bazadan o'qib olamiz:
    const [rows] = await db.query(
      'SELECT type, amount FROM transactions WHERE id = ? AND debt_id = ?',
      [transactionId, id]
    );
    if (rows.length === 0) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    const { type, amount } = rows[0];

    // 2. Tranzaksiyani transactions jadvalidan o'chiramiz:
    await db.query(
      'DELETE FROM transactions WHERE id = ? AND debt_id = ?',
      [transactionId, id]
    );

    // 3. Asosiy summani yangilash uchun teskari amalni bajarish:
    //    Agar type = "plus" bo'lsa, oldin asosiy summaga qo'shilgan => endi ayirish kerak,
    //    Agar type = "minus" bo'lsa, oldin asosiy summadan ayirilgan => endi qo'shish kerak.
    let operator = '-';
    if (type === 'minus') {
      operator = '+';
    }

    await db.query(
      `UPDATE debts SET amount = amount ${operator} ? WHERE id = ?`,
      [amount, id]
    );

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' });
  }
};




exports.getDebtorDetail = async (req, res) => {
  const { id } = req.params;
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–∏–∫–∞
    const [debtorRows] = await db.query('SELECT * FROM debts WHERE id = ? AND user_id = ?', [id, req.user.id]);
    if (debtorRows.length === 0) {
      return res.status(404).json({ message: '–î–æ–ª–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    const debtor = debtorRows[0];

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ debt_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ transactions)
    const [transactionsRows] = await db.query('SELECT * FROM transactions WHERE debt_id = ? ORDER BY date DESC', [id]);

    res.json({
      debtor,
      transactions: transactionsRows
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –¥–æ–ª–∂–Ω–∏–∫–∞:", error);
    res.status(500).json({ message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π" });
  }
};

